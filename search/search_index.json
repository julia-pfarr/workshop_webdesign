{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-Design for Scientists","text":""},{"location":"#a-workshop-for-easy-and-fast-website-generation-using-mkdocs","title":"A workshop for easy and fast website generation using mkdocs.","text":"<p>More and more scientists make use of easy static website generation to introduce themselves and their work to the broad public, potential future employers or funding sources.</p> <p></p> <p>During the workshop we will set up our own website using Material for MkDocs and GitHub Pages.<sup>1</sup></p> <p>After going through this workshop you'll have a first draft of your website and the skills to develop the website further on your own.</p> <p>Take a look at  Anna-Lena's website that was created with this workshop for an example of what you can do!</p> <p>Get started</p> <p>Find additional background information on web design, the utilized tools in this workshop and CI on GitHub in these </p> <p>Google Slides</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>My work on this workshop was enabled through my work and training as a Data Steward in the SFB 135 \"Cardinal Mechanisms of Perception\", infrastructure project NOWA. </p> <p></p> <ol> <li> <p>This website contains instructions on how to create a personal website using Material for MkDocs and is thus heavily based on the documentation pages for MkDocs, Material for MkDocs, and GitHub Pages. I want to thank the developers for making their software and documentation freely available for everyone.\u00a0\u21a9</p> </li> <li> <p>Image by storyset, retrieved from freepik.\u00a0\u21a9</p> </li> </ol>"},{"location":"custom/","title":"Customization","text":""},{"location":"custom/#getting-started","title":"Getting started","text":"<p>Open your terminal and type:  <pre><code>mkdocs new . \n</code></pre> This creates template files for the website in your current directory. Your folder now contains the following: <pre><code>.\n\u251c\u2500\u2500 docs/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre></p>"},{"location":"custom/#the-docs-folder","title":"The docs folder","text":"<p>Over the course of this workshop we will heavily populate the docs folder with different kind of files. All the content you want to display on your website in form of text or images will live in this folder. Most of the time, this content is written with Markdown which enables you to do nice formatting, include code-chunks, images, tables etc. etc.</p>"},{"location":"custom/#the-yaml-file","title":"The YAML-file","text":"<p>The mkdocs.yml file determines the settings of your website. In this file you state in which order you want your content (navigation), which theme, color, font, language; change icons and copyright etc. etc. </p> <p>Find more background information on Markdown and YAML in the Google Slides.</p> <p>After you created the template folder you can already check how the template website looks by creating a localhost address. For this, you simply have to type the following command in the terminal (inside your website directory):  <pre><code>mkdocs serve\n</code></pre> Copy the localhost:8000 into a browser tab. You can now see how the template website looks like: </p> <p></p> <p>It will always automatically update as soon as you change something in your configurations (i.e., the YAML file) or your content (i.e., in your Markdown files). </p>"},{"location":"custom/#first-customizations","title":"First Customizations","text":"<p>As mentioned above, you can customize your website regarding a lot of features. The documentation of mkdocs-material is very comprehensive and easily understandable, which is why I will link to their site for many of the instructions. </p>"},{"location":"custom/#task-1","title":"Task 1","text":"<p>Open the mkdocs.yml file: </p> <ul> <li>Give your website a name </li> <li>add the theme of the design you're using (here: material)</li> <li>hint to the directory where all your Markdown files and other content will live     <pre><code>site_name: example      \ntheme:                  ##under theme goes everything design related\n    name: material      \ndocs_dir: docs            \n</code></pre></li> </ul>"},{"location":"custom/#task-2","title":"Task 2","text":"<p>Please visit the mkdocs-material setup page and go through the first four configurations: </p> <ul> <li>colors </li> <li>fonts </li> <li>language </li> <li>logo and icons</li> </ul> <p>Changes are made in the YAML file under <code>theme:</code> and apply immediately. You can check the changes on the website in your browser via the localhost address.</p> <p>Best Practice</p> <p>Create a new folder in the docs directory called assets and within assets a new directory called images. In this images folder you should store all the images you'll use on your website.  <pre><code>.\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 images\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 creating-your-site.png\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre></p>"},{"location":"custom/#filling-your-website-with-content","title":"Filling your website with content","text":"<p>Content divided in different sections is created by multiple Markdown-files. For each section you need a new Markdown-file. In this file you write and format the text (and images, code, citations etc.) according to the Markdown syntax.  </p>"},{"location":"custom/#task-3","title":"Task 3","text":"<ul> <li>Make yourself familiar with the Markdown syntax</li> <li>Create new .md files and fill them with content, e.g., <ul> <li>a section to introduce yourself in a section (e.g, \"About\")</li> <li>a section where you outline your research interests and display some related figures </li> <li>a section with contact details </li> <li>a Blog section</li> <li>etc. </li> </ul> </li> </ul> Landing page <p>How to create a pretty landing page is outlined in another section. Please only focus on the content of your sections in this task. </p> Curriculum Vitae <p>Instead of displaying your CV using .md you can also import a pdf-version of your CV. If you'd like to do so, please see the section \"Pretty and Useful Extras\". </p>"},{"location":"custom/#setting-up-the-navigation","title":"Setting up the navigation","text":"<p>Now that you gathered the content for your website you will need to determine the order and the look of your navigation bar. </p>"},{"location":"custom/#task-4","title":"Task 4","text":"<p>Open your .yml file and define the order of your content, e.g.: <pre><code>    site_name: example\n    theme:\n        name: material\n    docs_dir: docs   \n    nav:\n        - Home: index.md ##this is fixed! The .md file of the landing page needs to be named \"index.md\"\n        - About: about.md\n        - Research interest: interest.md\n        - Contact: contact.md\n        - ##etc\n</code></pre></p>"},{"location":"custom/#task-5","title":"Task 5","text":"<p>Read through the navigation configurations, choose the ones you like and apply them to your website by defining it in your .yml file. For example, the navigation (and other) setups for this website look like this: <pre><code>site_name: Workshop Web-Design for Scientists\ntheme:\n  name: material\n  palette:\n    primary: blue grey\n  font: \n    text: Montserrat\n    code: Roboto Mono  \n  language: en\n  logo: assets/images/nowa-white.png\n  features:\n    - navigation.tabs           #navigation tabs vertically aligned under on the top\n    - navigation.tabs.sticky    #tabs stay visible when scrolling down\n    - navigation.top            #back-to-top button \n    - navigation.sections       #sections (=.md files) rendered\n    - navigation.expand         #left sidebar will expand all collapsible subsections \n    - toc.integrate             #\"Table of contents\" is not separately shown on the right but integrated in the navigation on the left \n</code></pre></p>"},{"location":"custom/#task-6","title":"Task 6","text":"<p>For the following sections: Add all the markdown extensions to your <code>mkdocs.yml</code> file, like so: <pre><code>markdown_extensions:\n  - admonition\n  - abbr\n  - attr_list\n  - def_list\n  - footnotes\n  - meta\n  - md_in_html\n  - codehilite\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n  - pymdownx.tabbed\n  - pymdownx.details\n  - pymdownx.inlinehilite\n  - pymdownx.smartsymbols\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.superfences\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji \n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre></p>"},{"location":"deploy/","title":"Deployment on GitHub","text":"<p>So far, we only build a local site, meaning that only you can see your website in your browser. To make our website public, we need to deploy it. For this, we are going to use the continuous deployment service of GitHub Pages. You can find background information on what deployment means and continuous deployment on GitHub in these Google Slides. </p>"},{"location":"deploy/#task-1","title":"Task 1","text":"<p>Create a new hidden folder in your website folder called <code>.github</code>. Within this folder create again a new folder called <code>workflows</code>. Your folder hierarchy should look like this: </p> <pre><code>.\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 artifacts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 example.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 images\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 creating-your-site.png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 .github\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 workflows\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <code>.github</code> <ol> <li>You will not see this folder because folders starting with a period are hidden folders. To make hidden folders visible, you can apply a certain keyboard command. This command is different for different OS. Please google yourself what command it is for your OS.  </li> </ol> <p>Inside this folder create a new file called <code>ci.yml</code>. Paste the following inside the <code>ci.yml</code> file:</p> <pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v3\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"deploy/#task-2","title":"Task 2","text":"<p>If you haven't done already, initialize Git in your local repository: <pre><code>cd my-website-folder\n</code></pre> <pre><code>git init\n</code></pre> <pre><code>git add . &amp;&amp; git commit -m \"commit message\" \n</code></pre></p> <code>git add . &amp;&amp; git commit</code> <p>This will add AND commit ALL files in your folder. If you want to exclude files from being version controlled by git, you have to add files or folders separately. </p>"},{"location":"deploy/#task-3","title":"Task 3","text":"<p>Go to your profile on GitHub and set up a new repository for your website:</p> <ul> <li>Click on \"New\"</li> <li> <p>Give your repository a name, click \"public\"(1), and make sure that you don't add a README.md (for now)</p> <p>The repository has to be public, otherwise you can't use the deployment service of GitHub pages.</p> </li> <li> <p>Follow the instructions given by GitHub on how to push your local repository to GitHub (\"Push an existing git repository\"). Refresh the GitHub repo. </p> </li> </ul> Pushing to GitHub <p>You need to have an SSH key set up to be able to push to and pull from GitHub. Otherwise you will run in unneccessary troubles. Please visit the GitHub info page for instructions on how to do that.  </p>"},{"location":"deploy/#task-4","title":"Task 4","text":"<ol> <li>After you pushed your repository to GitHub, please go to \"Settings\" of your repository. </li> </ol> <ol> <li>Go to the section \"Pages\" under the left sidebar.</li> <li>Under \"Build and deployment\", use the branch dropdown menu and select a publishing source.</li> </ol> <ol> <li>Change \"None\" to \"gh_pages\".</li> </ol> <ol> <li>Click \"Save\".</li> </ol> <p>If you've done all these steps, the deployment workflow should have been triggered and your website is deployed.</p>"},{"location":"deploy/#task-5","title":"Task 5","text":"<ol> <li>Go to \"Actions\" in your repository.</li> <li>Click on \"pages build and deployment\". You now see the deployment workflow.</li> <li>Under \"deployment\" you see a link. This is the link to your website. The link will always stay the same as long as you use this repository. </li> </ol>"},{"location":"deploy/#future-development-of-your-website","title":"Future development of your website","text":"<p>You're website is now officially online. If you want to make updates on your website, you can do that either locally in your folder (like before) or directly in the GitHub repository. Either way, the important things to remember are:</p> <ul> <li> <p>Your local folder is now linked to a GitHub repository. The deployment is done over the GitHub repository. Every change you make in your local website folder needs to be pushed to GitHub in order to be updated on your website. Don't let yourself be confused by the changes you see when you look at your website locally via the localhost address. YOUR CHANGES ARE NOT ONLINE UNLESS THEY ARE DEPLOYED BY GITHUB!</p> </li> <li> <p>If you make changes in GitHub and later decide to continue working locally, you need to do a <code>git pull</code> first to integrate the changes you made in GitHub into your local git repository. </p> </li> </ul>"},{"location":"extras/","title":"Pretty and useful extras","text":"<p>Material for Mkdocs has a lot to offer in terms of making your website pretty and adding useful features. </p>"},{"location":"extras/#adding-a-pdf-file","title":"Adding a pdf file","text":"<p>To display your CV you might want to have a pdf file added on your website instead of formatting your CV in Markdown, like this:</p>"},{"location":"extras/#task-1","title":"Task 1","text":"<p>Create a new folder inside your <code>docs</code> folder called <code>artifacts</code>. Place your pdf-file inside the <code>artifacts</code> folder.</p>"},{"location":"extras/#task-2","title":"Task 2","text":"<p>Open your <code>CV.md</code> file. Place the following html-code inside the file: <pre><code>&lt;object data=\"../artifacts/Filename.pdf\" type=\"application/pdf\" height= \"500\" width=\"100%\"&gt;\n&lt;/object&gt;\n</code></pre> You can adjust the height and width as you wish. </p>"},{"location":"extras/#more-extras","title":"More extras","text":""},{"location":"extras/#task-2_1","title":"Task 2","text":"<p>Go to the website of Material for Mkdocs and add some nice features to your website. </p> <p>Here's a short overview what you can do:</p> <p>With a title</p> <p>Note with a title</p> <p>Notes on the side</p> <p>Note without a title</p> <p>Extra task: Try make your own icon for admonitions!</p> <p></p> <p>You can make annotations (1) to your text. Even with emojis (Extra task)</p> <ol> <li>I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <p>You can make a button </p> <pre><code>Code blocks\n</code></pre> Table table <code>Table</code> table <p>Footnotes<sup>1</sup>. </p> <p>Highlighting:</p> <ul> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul> <p>...and much more! Try everything out!</p>"},{"location":"extras/#task-3","title":"Task 3","text":"<p>Go to the setup page by Material for Mkdocs and find out about more customizations. E.g., for the footer Icons for social media can be included by defining them in the <code>mkdocs.yml</code> file like this: <pre><code>extra:\n  social:\n    - icon: fontawesome/brands/twitter\n      link: https://twitter.com/your-account\n    - icon: material/email\n      link: mailto:email-address\n</code></pre> The icon will then appear in the footer of your website. You can search for the icons [here], replacing the <code>-</code> with <code>/</code> when you enter it in your yaml-file. </p>"},{"location":"extras/#blog","title":"Blog","text":"<p>If you want to set up a blog on your website you might want to think about using the Blog-Plugin by Mkdocs. This plugin enables features such as adding a date, reading time, tags, and topics for your blog entries (example Blog from their website). </p> <p>If you don't use the Blog-Plugin you can just as well create usual Markdown-files and order them in your .yaml file accordingly, like so: <pre><code>nav:\n- Home: index.md\n- About: about.md\n- CV: cv.md\n- Blog:\n  - Topic 1: Topic1.md\n  - Topic 2: Topic2.md\n  - Topic 3: Topic3.md\n  - ...\n</code></pre></p> <p>However, this will become a bit chaotic and unclear over time, depending on how many blog entries you want to make. Thus, I recommend looking into the Blog-Plugin to make your blog look more professional. </p>"},{"location":"extras/#license","title":"License","text":"<p>You should think about adding a license to your website. You can either display the license as an extra tab or include it in the copyright section, like so: <pre><code>site_name: Workshop Web-Design for Scientists\ncopyright: &lt;a href=\"https://choosealicense.com/licenses/mit/\"&gt;License&lt;/a&gt;\n  &amp;copy; 2023 Julia-Katharina Pfarr&lt;br&gt;\n</code></pre></p>"},{"location":"extras/#imprint","title":"Imprint","text":"<p>In the same way you can add a license to your copyright footer, you could add an imprint. This is not necessary for a non-commercial personal website but only for commercial websites. </p>"},{"location":"extras/#privacy-policy","title":"Privacy Policy","text":"<p>If you set up your website in a way that you collect private data (e.g., newsletter or blog subscriptions), you will need a Privacy Policy. You can include this in the copyright footer as well, just as the license above. </p> <ol> <li> <p>I am a footnote.\u00a0\u21a9</p> </li> </ol>"},{"location":"installing/","title":"Installing","text":"<p>To actively participate in the workshop you need to have...</p> <ol> <li>... python installed in order to use pip for installing the python packages we need for setting up the website. When you have python installed, run the following command in your terminal in order to install \"Material for mkdocs\", which we will use to create our website: <pre><code>pip install \\\n    mkdocs \\\n    mkdocs-material \\\n    mkdocs-material-extensions \\\n    pymdown-extensions \n</code></pre></li> <li>... a GitHub account and a SSH key setup. </li> <li>... a local code editor, such as VS Code. I highly recommend VS Code because it provides you with... <ul> <li>syntax highlighting for multiple languages (which we will need)</li> <li>displaying multiple files next to each other (we will need to modify content in multiple files simultaneously)</li> <li>preview for rendered markdown-files (which we will work with to design the content)</li> </ul> </li> <li>... Git installed and configured on your local computer. </li> </ol>"},{"location":"landing/","title":"Creating a Landing Page","text":"<p>The landing page is the first page people see when they visit your website. As your primary goal with a personal website is to introduce yourself, my recommendation for a landing page is the following:</p> <ul> <li>display a welcome-statement to welcome the visitors on your website</li> <li>put a picture of yourself, preferably in the center of the landing page</li> <li>show your contact information in form of icons </li> <li>name a few buzz-words which describe yourself and your skills best</li> <li>link to the most important section on your website</li> </ul>"},{"location":"landing/#using-markdown-only","title":"Using Markdown only","text":""},{"location":"landing/#task-1","title":"Task 1","text":"<p>Surely, you can just apply your newly acquired Markdown-skills to create a landing page. For example, the landing page of this website was created using only Markdown. </p> <p>You can use images and buttons combined with a text. See my <code>index.md</code> file as template. How to insert contact information in form of buttons will be shown in the next section \"Pretty and useful extras\".</p>"},{"location":"landing/#using-markdown-including-html-configurations","title":"Using Markdown including html configurations","text":"<p>Sometimes you want a bit more customization than the Markdown syntax allows. Luckily, the Markdown syntax allows to insert plain html code. With this, you can apply the more flexible html configurations within your .md-file without having to learn all of the html language. </p> <p>With the following tasks, you can create a landing page looking similar to this:</p> <p></p>"},{"location":"landing/#optional-task","title":"Optional task","text":"<p>Try to use html styles to format and align your text (e.g., put a big text in the middle of the page). Please see this HTML info page for formatting in html language.</p> <p>Here is an example code for a landing page shown in the image above: </p> <pre><code>---\nhide:\n  - navigation\n  - toc\n---\n&lt;!--/* Background image: applies to the \"body\" of the page */--&gt;\n&lt;!--/* background-repeat: if image should keep original size and repeat itself until full page is covered */--&gt;\n&lt;!--/* background-size and position to make image cover full page and don't stretch when changing the browser's window size */--&gt;\n&lt;style&gt;\nbody {\n  background-image: url('../assets/images/landing.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  position: relative;\n}\n&lt;/style&gt;\n\n&lt;!--/* Or background color instead: \n&lt;body style=\"background-color:aquamarine;\"&gt;&lt;/body&gt; */--&gt;\n\n&lt;!--/* Text alignement */--&gt;\n&lt;!--/* position, top, left, transofrm: vertical alignement; number is for how many pixels the text is shifted downwards*/--&gt;\n&lt;!--/* text-align: horizontal alignement */--&gt;\n&lt;b&gt;&lt;h1 style=\"position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); font-size:300%; color:black; text-align:center\"&gt;NOWA Workshop&lt;/h1&gt;&lt;/b&gt;\n\n&lt;p style=\"position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%); font-size:150%; color:black; text-align:center\"&gt; Welcome and buzzwords&lt;/p&gt;\n\n&lt;!--/* One button in the middle of the page */--&gt;\n&lt;b&gt;&lt;h3 style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); margin: auto; text-align:center\"&gt;&lt;button&gt;[Get to know me](link to next page){ .md-button .md-button--primary }&lt;/button&gt;&lt;/h3&gt;&lt;/b&gt;\n\n&lt;!--/* Buttons with social media icons next to each other */--&gt;\n&lt;b&gt;&lt;h3 style=\"position: absolute; top: 60%; left: 35%; transform: translate(-50%, -50%); margin: auto; text-align:center\"&gt;&lt;button&gt;[:fontawesome-brands-github:](link){ .md-button .md-button--primary }&lt;/button&gt;&lt;/h3&gt;&lt;/b&gt;\n\n&lt;b&gt;&lt;h3 style=\"position: absolute; top: 60%; left: 45%; transform: translate(-50%, -50%); margin: auto; text-align:center\"&gt;&lt;button&gt;[:fontawesome-brands-linkedin:](link){ .md-button .md-button--primary }&lt;/button&gt;&lt;/h3&gt;&lt;/b&gt;\n\n&lt;b&gt;&lt;h3 style=\"position: absolute; top: 60%; left: 55%; transform: translate(-50%, -50%); margin: auto; text-align:center\"&gt;&lt;button&gt;[:simple-researchgate:](link){ .md-button .md-button--primary }&lt;/button&gt;&lt;/h3&gt;&lt;/b&gt;\n\n&lt;b&gt;&lt;h3 style=\"position: absolute; top: 60%; left: 65%; transform: translate(-50%, -50%); margin: auto; text-align:center\"&gt;&lt;button&gt;[:simple-twitter:](link){ .md-button .md-button--primary }&lt;/button&gt;&lt;/h3&gt;&lt;/b&gt;\n</code></pre>"},{"location":"landing/#even-more-html-configurations","title":"Even more html configurations","text":"<p>If you want to customize even more in html language (like blocking out the header and footer on the landing page), it makes sense to override the whole theme of Material for MkDocs and use your own html configurations for EVERYTHING. With this you have more freedom but also more work. See below an example setup for a <code>home.html</code> and <code>main.html</code> file. </p> <p>1. </p> <p>Create a <code>overrides</code> directory inside your website folder (not inside the <code>docs</code> folder!).</p> <p>2.</p> <p>Open your <code>mkdocs.yml</code> file and put the following: <pre><code>theme:\n  custom_dir: overrides\n</code></pre></p> <p>3.</p> <p>Create a <code>home.html</code> in your <code>overrides</code> directory and put the following content: <pre><code>{% extends \"main.html\" %}\n  {% block tabs %}\n    {{ super() }}\n\n  &lt;!--/* Add library for social media buttons */ --&gt;  \n  &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"&gt;    \n\n  &lt;style&gt;\n  body \n  /* Use \"linear-gradient\" if you want to add a darken background effect to the image. This will make the text easier to read */\n  {background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('../assets/images/landing.png'); \n\n  /* If you want a background color instead of an image: \n  background-color:powderblue;*/\n\n  /* Position and center the image to scale nicely on all screens */\n  background-position: center;\n  background-repeat: no-repeat;\n  background-attachment: fixed; \n  background-size: cover;\n\n  /* Place text in the middle of the image */\n  text-align: center;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;}\n\n  /* Fixate page */\n  .md-header{position:initial}\n  .md-main__inner{margin:0}\n  .md-content{display:none}@media screen and (min-width:60em){.md-sidebar--secondary{display:none}}@media screen and (min-width:76.25em){.md-sidebar--primary{display:none}}\n  &lt;/style&gt;\n\n  &lt;!--/* Start content */--&gt;\n      &lt;div&gt;\n\n  &lt;!--/* Use attributes to define color, size, and alignment of your text; for ALL of the text, not just the header */--&gt;\n      &lt;header style=\"color:white; font-size:50px;\"&gt; My header&lt;/header&gt;\n      &lt;h1 style=\"color:white; font-size:30px;\"&gt;Smaller heading&lt;/h1&gt; \n      &lt;h2 style=\"color:white; font-size:20px;\"&gt;Even smaller heading&lt;/h2&gt; \n      &lt;p&gt;&lt;br/&gt;This is a very small text without resizing&lt;/p&gt;\n      &lt;p&gt;This is a reference to another website within a text: &lt;a href=\"url to website\"&gt;Name&lt;/a&gt;&lt;/p&gt;\n\n      &lt;!--If you want to put an image:\n      &lt;img src=\"img_girl.jpg\" alt=\"Girl in a jacket\" style=\"width:500px;height:600px;\"&gt;--&gt;\n\n      &lt;!--/* This is a button */--&gt;\n      &lt;button onclick=\"link;\" type=\"button\" padding=\"10px\" style=\"background:white; color: black;\" &gt;Get started&lt;/button&gt;\n\n      &lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;small&gt;This is a suuuuper small text&lt;/p&gt;&lt;/small&gt; \n\n      &lt;!--/* Use social media buttons; don't forget to size and color the button */--&gt;\n      &lt;a href=\"https://twitter.com/jk_pfarr\" class=\"fa fa-twitter\"&gt;&lt;/a&gt;\n\n      &lt;/div&gt;\n    {% endblock %}\n  {% block content %}{% endblock %}\n{% block footer %}{% endblock %}        \n</code></pre></p> <p>Please see this HTML info page for formatting in html language.</p> <p>2:</p> <p>Create another file in the same directory called <code>main.html</code> with the following content: <pre><code>{% extends \"base.html\" %}\n</code></pre></p> <p>4.</p> <p>Open your <code>index.md</code> file and put the following content: <pre><code>---\ntemplate: overrides/home.html\n---\n</code></pre></p>"},{"location":"resources/","title":"Further resources","text":"<p>There's really a lot you can do to create your own website. Here are some further resources for trying different things:</p> Free sites for hosting Other themes for MkDocs Other static site generators Netlify MkDocs catalog Jekyll GitLab Pages MkDocs-themes Hugo Surge Docusaurus Firebase hosting Sphinx Bitbucket GitBook (closed source) Vercel ... Render Tiiny host AWS Amplify ..."},{"location":"resources/#resources-for-html-coding","title":"Resources for HTML coding","text":"<p>Personally, I recommend the tutorial by W3 Schools. The documentation is very comprehensive but easy to understand. Additionally, they provide you with an interactive editor where you can try things out and see which changes in the code lead to what kind of difference in the rendering. </p>"},{"location":"troubleshoot/","title":"Troubleshooting","text":"<p>What if...</p>"},{"location":"troubleshoot/#preview-server","title":"Preview server","text":"<p>... I get an error message in the terminal?</p> <p>This can happen sometimes. Try those things in the given order:</p> <ul> <li>kill the current process in your terminal and start <code>mkdocs serve</code> again.</li> <li>check your <code>mkdocs.yml</code> file for indentation errors. </li> <li>check your <code>mkdocs.yml</code> file for any other errors such as misspelling, invalid variable names, missing parameters etc. </li> </ul>"},{"location":"troubleshoot/#yaml-file","title":"YAML-file","text":"<p>... my website doesn't update?</p> <ul> <li>Make sure you saved the updates on your <code>mkdocs.yml</code>. </li> <li>Make sure that you considered the indentation rules in your <code>mkdocs.yml</code> file.</li> </ul>"},{"location":"troubleshoot/#images-and-pdfs","title":"Images and PDFs","text":"<p>... my pdfs and images are not shown?</p> <ul> <li>Make sure you used the correct code for inserting an image. </li> <li>Is the path to your image correct?</li> <li>Make sure that the folders where you store your pdfs and images are inside the <code>docs</code> folder. This is important because in your <code>mkdocs.yml</code> file you configured that the directory for your content (=<code>docs_dir</code>) is called <code>docs</code>. So MkDocs expects everything you want to have on your website to be somewhere inside <code>docs</code>.</li> </ul> <p>... my image shows in the local website but not after I deployed it with GitHub?</p> <p>The deployment server is a bit more sensitive than the preview server. </p> <ul> <li>Make sure you used the correct code for inserting an image. </li> <li>Is the path to your image correct?</li> <li>Check the extension of your file. If you changed the extension at some point, the image will not be recognized. E.g., if your image was originally a JPEG (.jpg) and you converted it to a PNG (.png) the image will not be recognized.     </li> </ul>"}]}